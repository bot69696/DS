Aim: Implementing Logistic Regression
Code:
# Logistic regression for classification problem
# using biopsy dataset in built-in library
# to classify a cell as benign or malignant (cancer cell) based on lab observations
library (MASS)
data(biopsy)
head(biopsy)
str(biopsy)
biopsy$ID=NULL #remove the variable ID not required to create the model
#rename the column headings
names(biopsy)=c("thick", "usize", "ushape", "adhsn", "celsiz", "nucl",
"chrom", "nuclus", "mit", "class")
# Data cleaning - checking for null fields
colSums(is.na(biopsy))
#remove NA fields
biopsy1=na.omit(biopsy)
set.seed(123) # random number generator
# divide the dataset into two - training and test data in 70:30 ratio
ind=sample(2, nrow(biopsy1), replace = TRUE, prob = c(0.7,0.3))
train=biopsy1 [ind==1,]
test=biopsy1 [ind==2,]
#check if data sets are formed properly
str(test)
table(train$class)
table(test$class)
# create the model with all feature variables and class is response variable
fullfit=glm(class~., family=binomial, data=train)
summary(fullfit)
exp(coef (fullfit)) # checking influence of feature variables on class variable
# add a variable to store probability based on model
train$prob=predict(fullfit, type="response")
#compare 1st 5 probabilities with actual values (0.9 probability shows
malignant)
train$prob[1:5]
train$class[1:5]
#make prediction based on probability, more than 0.5 is assigned malignant
train$predict=rep("benign",474)
train$predict[train$prob>0.5]="malignant"
#create confusion matrix-row shows prediction, column actual observation
table(train$predict,train$class)
#check percentage of correct prediction
mean(train$predict==train$class)
# repeat on test data set
test$prob=predict (fullfit, newdata=test, type="response")
#make prediction based on probability, more than 0.5 is assigned malignant
test$predict=rep("benign", 209) #209 is no. of rows in test dataset
test$predict[test$prob>0.5]="malignant"
#create confusion matrix-row shows prediction, column actual observation
table(test$predict, test$class)
#check percentage of correct prediction
mean(test$predict==test$class)
library(ROCR)
ROCRpred <- prediction (test$prob, test$class)
ROCRperf <- performance (ROCRpred, 'tpr', 'fpr')
plot(ROCRperf, colorize=TRUE)
auc=performance(ROCRpred, 'auc')
auc@y.values
